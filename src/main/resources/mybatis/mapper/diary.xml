<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.future.blue.diary.dao.IDiaryDAO">

   <!-- 1. 다이어리 생성 (USE_YN은 Y로 설정) -->
<insert id="createDiary"
        parameterType="com.future.blue.diary.vo.DiaryVO"
        useGeneratedKeys="true" keyProperty="diaryId">
    INSERT INTO DIARY (
    DIARY_ID,
    DIARY_WRITER,
    DIARY_TITLE,
    DIARY_CONTENTS,
    CREATE_DT,
    UPDATE_DT,
    MEM_ID,
    DIARY_HIT,
    USE_YN,
    DIARY_IMAGE
    ) VALUES (
    DIARY_SEQ.NEXTVAL,
    #{diaryWriter},
    #{diaryTitle},
    #{diaryContents},
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    #{memId},
    0,
    'Y',
    #{diaryImage}
    )
</insert>




   <!-- 2. 다이어리 삭제 (USE_YN을 'N'으로 변경) -->
   <update id="deleteDiary" parameterType="int">
      UPDATE DIARY
      SET USE_YN =
      'N'
      WHERE DIARY_ID = #{diaryId}
   </update>

   <!-- 3-1. 다이어리 조회 (아이디를 이용한 조회, USE_YN='Y'인 것만 조회) -->
   <select id="selectDiaryById" parameterType="int"
      resultMap="diaryResultMap">
      SELECT * FROM DIARY
      WHERE DIARY_ID = #{diaryId} AND USE_YN =
      'Y'
   </select>

   <!-- 3-2. 다이어리 수정 (조회된 데이터를 바탕으로 수정) -->
   <update id="updateDiary"
      parameterType="com.future.blue.diary.vo.DiaryVO">
      UPDATE DIARY
      SET
      DIARY_TITLE = #{diaryTitle},
      DIARY_CONTENTS = #{diaryContents},
      UPDATE_DT = CURRENT_TIMESTAMP,
      DIARY_IMAGE = #{diaryImage}
      WHERE DIARY_ID = #{diaryId} AND USE_YN =
      'Y'
   </update>

   <!-- 4-1. 개별 다이어리 조회 (좋아요 포함, USE_YN='Y'인 것만 조회) -->
   <select id="selectDiaryWithLikes" parameterType="int"
      resultMap="diaryWithLikesResultMap">
      SELECT D.*, L.MEM_ID AS LIKER_ID
      FROM DIARY D
      LEFT JOIN
      DIARY_LIKES L ON D.DIARY_ID = L.DIARY_ID
      WHERE D.DIARY_ID = #{diaryId}
      AND D.USE_YN = 'Y'
   </select>

   <select id="selectDiaryList"
   resultType="com.future.blue.diary.vo.DiaryVO" parameterType="map">
   SELECT * FROM (
      SELECT
         D.DIARY_ID,
         D.DIARY_TITLE,
         D.DIARY_WRITER,
         D.CREATE_DT,
         D.DIARY_HIT,
         D.DIARY_IMAGE,
         MAX(DBMS_LOB.SUBSTR(D.DIARY_CONTENTS, 700, 1)) AS diaryContents,
         COUNT(L.DIARY_ID) AS LIKE_COUNT,
         ROW_NUMBER() OVER (
            <choose>
               <when test="sortBy == 'new'">
                  ORDER BY D.CREATE_DT DESC
               </when>
               <when test="sortBy == 'popular'">
                  ORDER BY LIKE_COUNT DESC
               </when>
               <when test="sortBy == 'old'">
                  ORDER BY D.CREATE_DT ASC
               </when>
               <otherwise>
                  ORDER BY D.CREATE_DT DESC
               </otherwise>
            </choose>
         ) AS row_num
      FROM DIARY D
      LEFT JOIN DIARY_LIKES L ON D.DIARY_ID = L.DIARY_ID
      WHERE D.USE_YN = 'Y'
      <if test="search != null">
         AND (D.DIARY_TITLE LIKE '%' || #{search} || '%'
         OR D.DIARY_WRITER LIKE '%' || #{search} || '%'
         OR D.DIARY_CONTENTS LIKE '%' || #{search} || '%')
      </if>
      GROUP BY
         D.DIARY_ID,
         D.DIARY_TITLE,
         D.DIARY_WRITER,
         D.CREATE_DT,
         D.DIARY_HIT,
         D.DIARY_IMAGE
   )
   WHERE row_num BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
</select>

   <select id="selectDiaryCount" parameterType="map"
      resultType="int">
      SELECT COUNT(D.DIARY_ID)
      FROM DIARY D
      LEFT JOIN DIARY_LIKES L ON
      D.DIARY_ID = L.DIARY_ID
      WHERE D.USE_YN = 'Y'
      <if test="search != null and search != ''">
         AND (
         D.DIARY_TITLE LIKE '%' || #{search} || '%'
         OR
         D.DIARY_WRITER LIKE '%' || #{search} || '%'
         OR D.DIARY_CONTENTS LIKE
         '%' || #{search} || '%'
         )
      </if>
      <if test="search == null or search == ''">
         AND 1 = 1 <!-- search가 없으면 조건을 추가하지 않음 -->
      </if>
   </select>


   <!-- 다이어리 조회수 증가 -->
   <update id="incrementDiaryHit">
      UPDATE DIARY
      SET DIARY_HIT = DIARY_HIT + 1
      WHERE
      DIARY_ID = #{diaryId} AND USE_YN = 'Y'
   </update>

   <!-- 다이어리 좋아요 추가 -->
   <insert id="insertLike">
      INSERT INTO DIARY_LIKES (DIARY_ID, MEM_ID)
      VALUES
      (#{diaryId}, #{memId})
   </insert>

   <!-- 다이어리 좋아요 취소 -->
   <delete id="deleteLike">
      DELETE FROM DIARY_LIKES
      WHERE DIARY_ID = #{diaryId}
      AND MEM_ID = #{memId}
   </delete>

   <!-- 다이어리 좋아요 목록 조회 -->
   <select id="selectLikes" parameterType="int" resultType="String">
      SELECT
      MEM_ID
      FROM DIARY_LIKES
      WHERE DIARY_ID = #{diaryId}
   </select>

   <!-- 결과 맵핑 -->
   <resultMap id="diaryResultMap"
      type="com.future.blue.diary.vo.DiaryVO">
      <result property="diaryId" column="DIARY_ID" />
      <result property="diaryWriter" column="DIARY_WRITER" />
      <result property="diaryTitle" column="DIARY_TITLE" />
      <result property="diaryContents" column="DIARY_CONTENTS" />
      <result property="createDt" column="CREATE_DT" />
      <result property="updateDt" column="UPDATE_DT" />
      <result property="memId" column="MEM_ID" />
      <result property="diaryHit" column="DIARY_HIT" />
      <result property="useYn" column="USE_YN" />
      <result property="diaryImage" column="DIARY_IMAGE" />
   </resultMap>

   <resultMap id="diaryWithLikesResultMap"
      type="com.future.blue.diary.vo.DiaryVO">
      <result property="diaryId" column="DIARY_ID" />
      <result property="diaryWriter" column="DIARY_WRITER" />
      <result property="diaryTitle" column="DIARY_TITLE" />
      <result property="diaryContents" column="DIARY_CONTENTS" />
      <result property="createDt" column="CREATE_DT" />
      <result property="updateDt" column="UPDATE_DT" />
      <result property="memId" column="MEM_ID" />
      <result property="diaryHit" column="DIARY_HIT" />
      <result property="useYn" column="USE_YN" />
      <result property="diaryImage" column="DIARY_IMAGE" />
      <result property="likerId" column="LIKER_ID" />
   </resultMap>

</mapper>
