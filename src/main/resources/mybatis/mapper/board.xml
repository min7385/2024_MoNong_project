<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.future.blue.board.dao.BoardDAO">

	<!-- 재사용 가능한 검색 조건 -->
    <sql id="searchCondition">
        WHERE 1=1
        <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(title)">
            AND BOARD_TITLE LIKE '%' || #{title} || '%'
        </if>
    </sql>
    
    <!-- 전체 게시글 목록 (제목 검색 및 페이징 처리) -->
    <select id="getBoardList" resultType="com.future.blue.board.vo.BoardVO" parameterType="com.future.blue.board.vo.SearchVO">
        SELECT *
		FROM (  SELECT rownum as rnum, a.*
		        FROM(SELECT board_id 
			            , BOARD_CATEGORY
			            , BOARD_WRITER
			            , BOARD_TITLE
			            , BOARD_PASS
			            , BOARD_CONTENTS
			            , CREATE_DT
			            , UPDATE_DT
			            , MEM_ID
			            , BOARD_HIT
			            , BOARD_LIKE
			            , USE_YN  
			        FROM BOARD
			        WHERE 1=1
		             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(title)">
			   		 AND BOARD_TITLE  LIKE '%' || #{title} || '%'
					 </if>
		             ORDER BY BOARD_ID DESC
		            ) a
		      ) b
		WHERE rnum BETWEEN #{firstRow} AND #{lastRow}       
    </select>
    
    <!-- 게시글의 총 개수 (검색 조건에 맞게 게시글 수 카운트 ) -->
    <select id="getTotalCount" resultType="int"  parameterType="com.future.blue.board.vo.SearchVO">
    		SELECT  COUNT(*)
	        FROM BOARD
	        <include refid="searchCondition" />
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="getBoardDetail" resultType="BoardVO" parameterType="int">
        SELECT  
  			B.BOARD_ID, B.BOARD_TITLE,B.BOARD_CONTENTS, B.MEM_ID, B.CREATE_DT, B.UPDATE_DT, B.BOARD_HIT, 
  			F.FILE_ID, F.FILE_PATH, F.FILE_NAME
		FROM BOARD B, BOARD_FILE F
		WHERE B.BOARD_ID = F.BOARD_ID(+)
  		AND B.BOARD_ID = #{boardId}
    </select>

    <!-- 게시글 작성(시퀀스를 사용해 BOARD_ID 값 자동 증가) -->
    <insert id="createBoard" parameterType="com.future.blue.board.vo.BoardVO">
        INSERT INTO BOARD (
    		BOARD_ID, 
    		BOARD_CATEGORY, 
    		BOARD_WRITER, 
    		BOARD_TITLE, 
    		CREATE_DT,
    		UPDATE_DT, 
    		USE_YN
		) 
		VALUES (
    		BOARD_SEQ.NEXTVAL, 
    		'자유게시판', 
    		#{boardWriter}, 
    		#{boardTitle}, 
    		SYSDATE,
    		SYSDATE, 
    		'Y'
		)
    </insert>
    
    <!-- 게시글 저장 -->
    <insert id="insertBoard" parameterType="com.future.blue.board.vo.BoardVO">
   	    <selectKey keyProperty="boardId" resultType="int" order="BEFORE">
	        SELECT BOARD_SEQ.NEXTVAL FROM dual
	    </selectKey>
    	INSERT INTO BOARD (
    		BOARD_ID, 
    		BOARD_CATEGORY, 
    		BOARD_WRITER,
    		BOARD_TITLE,
    		BOARD_CONTENTS,
    		CREATE_DT,
    		UPDATE_DT,
    		MEM_ID,
    		BOARD_HIT,
    		BOARD_LIKE,
    		USE_YN
    	)
	    VALUES (
	    	#{boardId},	<!-- BOARD_ID 자동 증가 -->
	    	'자유게시판',
			#{boardWriter},
			#{boardTitle},
			#{boardContents},
			SYSDATE,
			SYSDATE,
			#{memId},
			0,
			0,
			'Y'
		)
	</insert>

    <!-- 게시글 수정 (유효한 데이터만 수정)-->
    <update id="updateBoardTitleAndPass" parameterType="map">
    	UPDATE BOARD
    	SET 
        	BOARD_TITLE = #{boardTitle},
        	BOARD_PASS = #{boardPass},
        	UPDATE_DT = SYSDATE
    	WHERE BOARD_ID = #{boardId}
      	  AND USE_YN = 'Y'
	</update>

    <!-- 게시글 삭제 -->
    <delete id="deleteBoard" parameterType="int">
        DELETE FROM BOARD
        WHERE BOARD_ID = #{boardId}
    </delete>
    
    <!-- 게시글 조회수 증가 -->
    <update id="increaseBoardHit" parameterType="int">
        <![CDATA[
    	UPDATE BOARD
    	SET BOARD_HIT = NVL(BOARD_HIT, 0) + 1
    	WHERE BOARD_ID = #{boardId}
    	]]>
    </update>

    <!-- 파일 추가 -->
    <insert id="addBoardFile" parameterType="com.future.blue.board.vo.BoardVO">
		<selectKey keyProperty="fileId" resultType="int" order="BEFORE">
	        SELECT BOARD_FILE_SEQ.NEXTVAL FROM dual
	    </selectKey>
        INSERT INTO BOARD_FILE (
        	FILE_ID, BOARD_ID, FILE_PATH, FILE_NAME, CREATE_DT, UPDATE_DT, USE_YN
        )
        VALUES (
        	#{fileId},
        	#{boardId},
        	#{fileName},
			#{filePath},
			SYSDATE,
			SYSDATE,
			'Y'
		)
    </insert>

    <!-- 특정 게시글의 파일 목록 조회 -->
    <select id="getBoardFiles" resultType="com.future.blue.board.vo.BoardVO">
        SELECT * 
        FROM BOARD_FILE
        WHERE BOARD_ID = #{boardId}
          AND USE_YN = 'Y'
    </select>


    <!-- 댓글 작성 -->
    <insert id="addComment" parameterType="com.future.blue.board.vo.BoardVO">
    	<selectKey keyProperty="commentId" resultType="int" order="BEFORE">
	        SELECT  BOARD_COMMENT_SEQ.NEXTVAL FROM dual
	    </selectKey>
	    
	    INSERT INTO BOARD_COMMENT (
	        COMMENT_ID, 
	        BOARD_ID,  
	        COMMENT_CONTENT, 
	        CREATE_DT,
	        UPDATE_DT, 
	        PARENT_COMMENT_ID,
	        MEM_ID, 
	        USE_YN
	    ) 
	    VALUES (
	        #{commentId},  <!-- 자동 증가 처리 --> 
	        #{boardId},  
	        #{commentContent}, 
	        SYSDATE,
	        SYSDATE, 
	        NULL, 
	        #{memId}, 
	        'Y'
    	)
	</insert>
	
	<!-- 댓글 조회  -->
	<select id="getComments" resultType="com.future.blue.board.vo.BoardVO">
        SELECT 
		    COMMENT_ID, 
		    BOARD_ID,  
		    COMMENT_CONTENT, 
		    CREATE_DT, 
		    UPDATE_DT, 
		    PARENT_COMMENT_ID, 
		    USE_YN
		FROM 
		    BOARD_COMMENT
		WHERE 
		    BOARD_ID = #{boardId}  
		ORDER BY 
    	COMMENT_ID DESC
    </select>
	
	<!-- 댓글 수정  -->
 	<update id="updateComment" >
        UPDATE BOARD_COMMENT
        SET 
            COMMENT_CONTENT = #{commentContent}, 
            UPDATE_DT = SYSDATE
        WHERE 
            COMMENT_ID = #{commentId} 
            AND USE_YN = 'Y'
            AND COMMENT_CONTENT != #{commentContent}
    </update>
            
    <!-- 댓글 삭제 -->
    <update id="deleteComment" parameterType="int">
    	UPDATE BOARD_COMMENT
    	SET 
        	USE_YN = 'N'
    	WHERE 
        	COMMENT_ID = #{commentId}
        	AND USE_YN = 'Y'  <!-- 삭제된 댓글이 다시 수정되지 않도록 조건 추가 -->
	</update>

    <!-- 특정 게시글의 댓글 목록 조회 
    <select id="getComments" resultType="com.future.blue.board.vo.BoardVO">
        SELECT * 
        FROM BOARD_COMMENT
        WHERE BOARD_ID = #{boardId}
        ORDER BY CREATE_DT ASC
    </select> -->
    
    <!-- 좋아요 추가 -->
    <insert id="addLike" parameterType="com.future.blue.board.vo.BoardVO">
        INSERT INTO BOARD_LIKE (LIKE_ID, BOARD_ID, LIKE_MEM_ID, COMMENT_ID, CREATE_DT, USE_YN)
        VALUES (#{likeId}, #{boardId}, #{likeMemId}, #{commentId}, SYSDATE, 'Y')
    </insert>

    <!-- 좋아요 삭제 -->
    <delete id="removeLike" parameterType="com.future.blue.board.vo.BoardVO">
        DELETE FROM BOARD_LIKE
        WHERE BOARD_ID = #{boardId} 
          AND LIKE_MEM_ID = #{likeMemId}
    </delete>

    <!-- 특정 게시글의 좋아요 수 조회 -->
    <select id="getLikeCount" resultType="int" parameterType="int">
        SELECT COUNT(*) 
        FROM BOARD_LIKE
        WHERE BOARD_ID = #{boardId}
    </select>

    <!-- 특정 사용자의 좋아요 여부 확인 (1이면 좋아요, 0이면 해당x.) -->
<!--     <select id="getBoardList" resultType="com.future.blue.board.vo.BoardVO">
        SELECT b.board_id AS boardId,
               b.title AS title,
               b.content AS content,
               (SELECT COUNT(*) FROM BOARD_LIKE WHERE board_id = b.board_id) AS likeCount
        FROM BOARD b
    </select> -->
    
</mapper>
